DEFAULT_TIMEOUT = 5 # seconds

class TimeoutHTTPAdapter(HTTPAdapter):
    def __init__(self, *args, **kwargs):
        self.timeout = DEFAULT_TIMEOUT
        if "timeout" in kwargs:
            self.timeout = kwargs["timeout"]
            del kwargs["timeout"]
        super().__init__(*args, **kwargs)

    def send(self, request, **kwargs):
        timeout = kwargs.get("timeout")
        if timeout is None:
            kwargs["timeout"] = self.timeout
        return super().send(request, **kwargs)

retries = Retry(total=3, backoff_factor=1, status_forcelist=[429, 500, 502, 503, 504], method_whitelist=["POST"])
adapter = HTTPAdapter(max_retries=retries)
http = requests.Session()
http.mount("http://", TimeoutHTTPAdapter(max_retries=retries))

def dag_post_callback(context):
    run = context['dag_run']
    conf = run.conf
    http.post(conf['dag_post_callback_url'], json={
        'dag_run_id': run.run_id,
        'dag_id': run.dag_id,
        'execution_date': str(run.execution_date),
        'start_date': str(run.start_date),
        'end_date': str(run.end_date),
        'state': run.state,
        'external_trigger': run.external_trigger,
        'conf': conf
    })

