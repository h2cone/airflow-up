DAG_CALLBACK_TIMEOUT = <if(d.dagCallbackTimeout)><d.dagCallbackTimeout><else>10<endif>

class TimeoutHTTPAdapter(HTTPAdapter):
    def __init__(self, *args, **kwargs):
        self.timeout = DAG_CALLBACK_TIMEOUT
        if "timeout" in kwargs:
            self.timeout = kwargs["timeout"]
            del kwargs["timeout"]
        super().__init__(*args, **kwargs)

    def send(self, request, **kwargs):
        timeout = kwargs.get("timeout")
        if timeout is None:
            kwargs["timeout"] = self.timeout
        return super().send(request, **kwargs)

retries = Retry(
    total=<if(d.dagCallbackRetryTotal)><d.dagCallbackRetryTotal><else>3<endif>,
    backoff_factor=<if(d.dagCallbackRetryBackoffFactor)><d.dagCallbackRetryBackoffFactor><else>1<endif>,
    status_forcelist=[429, 500, 502, 503, 504],
    method_whitelist=["POST"]
)
http = requests.Session()
adapter = TimeoutHTTPAdapter(max_retries=retries)
http.mount("http://", adapter)
http.mount("https://", adapter)

def dag_callback(context):
    run = context["dag_run"]
    conf = run.conf
    url = conf["dagCallbackUrl"].format("dagCallback")
    http.post(url, json={
        'dag_run_id': run.run_id,
        'dag_id': run.dag_id,
        'execution_date': run.execution_date.isoformat(),
        'start_date': run.start_date.isoformat(),
        'end_date': run.end_date.isoformat(),
        'state': run.state,
        'external_trigger': run.external_trigger,
        'conf': conf
    })

def op_callback(context):
    ti = context["ti"]
    run = context["dag_run"]
    conf = run.conf
    tid = ti.task_id
    return_value = ti.xcom_pull(task_ids=tid, key="return_value")
    url = conf['dagCallbackUrl'].format("opCallback")
    http.post(url, json={
        'task_id': tid,
        'dag_id': ti.dag_id,
        'dag_run_id': run.run_id,
        'operator': ti.operator,
        'start_date': ti.start_date.isoformat(),
        'end_date': ti.end_date.isoformat(),
        'state': ti.state,
        'return_value': return_value
    })

