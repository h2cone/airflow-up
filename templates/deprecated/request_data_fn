def request_data_fn(**context):
    ti = context["ti"]
    task_id = ti.task_id

    conf = context["dag_run"].conf
    type = conf["opToPayload"][task_id]["type"]
    data = conf["opToPayload"][task_id]["data"]
    event = conf["event"]

    if "testCondition" == type:
        enabled = data["enabled"]
        conditions = data["conditions"]
        if conditions:
            for cond in conditions:
                src = cond["src"]
                if "event" == src:
                    name = cond["name"]
                    value = event.get(name)
                    cond["judgeField"] = value
                else:
                    value = get_value(ti, cond, conf)
                    cond["judgeField"] = value
            data["conditions"] = conditions
            if not enabled:
                expr = data["expr"]
                if expr:
                    for cond in conditions:
                        variable = cond["variable"]
                        value = cond["judgeField"]
                        if value is None or isinstance(value, bool):
                            value = json.dumps(value)
                        else:
                            value = str(value)
                        expr = expr.replace(variable, value)
                    data["expresses"] = [expr]

    elif type in [
        "assetInfo",
        "assetVul",
        "ipAddress",
        "weibuIntel",
        "tianjiIntel",
        "customTable",
        "activityList",
        "script",
        "email",
        "lvmengAds",
        "lvmengLeakScan",
    ]:
        values = []
        params = data["execParams"]
        if params:
            for param in params:
                src = param["src"]
                if "event" == src:
                    name = param["name"]
                    value = event.get(name)
                    values.append(value)
                else:
                    value = get_value(ti, param, conf)
                    values.append(value)
            data["executionParams"] = values
            data["keywords"] = values
            data["ips"] = values
            if "email" == type:
                content = data["email"]["content"]
                if content:
                    for idx, param in enumerate(params):
                        variable = param["variable"]
                        if not variable:
                            continue
                        value = values[idx] if idx < len(values) else None
                        param["_value"] = value
                        if value is None or isinstance(value, bool):
                            value = json.dumps(value)
                        else:
                            value = str(value)
                        content = content.replace(variable, value)
                    data["email"]["content"] = content
    else:
        logging.warning(
            "faield to request_data_fn, type: %s, task_id: %s", type, task_id
        )
    return json.dumps(data)


def get_value(ti, param, conf):
    prev_task_id = param["prevTaskId"]
    return_value = ti.xcom_pull(task_ids=prev_task_id, key="return_value")
    body = json.loads(return_value)
    data = body["data"]
    prev_param_id = param.get("prevParamId")
    prev_field_name = param["name"]
    idx = get_value_index(prev_task_id, prev_param_id, conf)

    if idx >= 0 and isinstance(data, list) and idx < len(data):
        return_val = data[idx]
        values = return_val.values()
        iterator = iter(values)
        value = next(iterator)
        if isinstance(value, dict):
            return value.get(prev_field_name)
        elif isinstance(value, list):
            if len(value) == 1:
                v = value[0]
                return v.get(prev_field_name) if v else None
            return json.dumps(
                list(map(lambda v: v.get(prev_field_name) if v else None, value))
            )
        else:
            logging.warning(
                "failed to get_value, return_val: %s, prev_task_id: %s",
                return_val,
                prev_task_id,
            )
    else:
        logging.warning("failed to get_value, data: %s", data)


def get_value_index(prev_task_id, prev_param_id, conf):
    if not prev_param_id:
        return 0
    data = conf["opToPayload"][prev_task_id]["data"]
    params = data["execParams"]
    index = -1
    for i, param in enumerate(params):
        id = param["id"]
        if id == prev_param_id:
            index = i
            break
    return index

